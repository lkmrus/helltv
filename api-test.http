### ============================================
### HELLTV Payment Service - API Tests
### PostgreSQL + Redis + Balance Audit System
### ============================================

@baseUrl = http://localhost:3050
@userId = 2
@productId = 1

### ============================================
### 1. PRODUCTS - Get all products
### ============================================
GET {{baseUrl}}/products
Content-Type: application/json

### ============================================
### 2. ACCOUNTS - Get user balance
### ============================================
GET {{baseUrl}}/accounts/user/{{userId}}
Content-Type: application/json

### ============================================
### 3. ACCOUNTS - Get transaction history
### ============================================
GET {{baseUrl}}/accounts/user/{{userId}}/history
Content-Type: application/json

### ============================================
### 4. ACCOUNTS - Audit balance (check consistency)
### Note: Audit также запускается автоматически
### после каждой debit/credit транзакции (асинхронно)
### ============================================
GET {{baseUrl}}/accounts/user/{{userId}}/audit
Content-Type: application/json

### ============================================
### 5. ACCOUNTS - Credit balance (пополнение)
### Description: Add money to user account from service
### ============================================
POST {{baseUrl}}/accounts/user/{{userId}}/credit
Content-Type: application/json

{
  "amount": 500.00
}

### ============================================
### 6. ACCOUNTS - Debit balance (списание)
### Description: Remove money from user account
### ============================================
POST {{baseUrl}}/accounts/user/{{userId}}/debit
Content-Type: application/json

{
  "amount": 50.00
}

### ============================================
### 7. ACCOUNTS - Debit with product purchase
### Description: Debit + create Order atomically
### ============================================
POST {{baseUrl}}/accounts/user/{{userId}}/debit
Content-Type: application/json

{
  "amount": 100.00,
  "productId": {{productId}}
}

### ============================================
### 8. ORDERS - Purchase product from balance
### Description: Alternative way to purchase (uses debit internally)
### ============================================
POST {{baseUrl}}/orders/create
Content-Type: application/json

{
  "userId": {{userId}},
  "productId": {{productId}}
}

### ============================================
### 9. ORDERS - Get order details
### Replace {orderId} with actual order ID from previous response
### ============================================
# GET {{baseUrl}}/orders/{orderId}
# Content-Type: application/json

### ============================================
### 10. TRANSACTIONS - Get transaction details
### Replace {transactionId} with actual transaction ID
### ============================================
# GET {{baseUrl}}/transactions/{transactionId}
# Content-Type: application/json

### ============================================
### SCENARIO 1: Full user flow - Credit → Purchase
### ============================================

### Step 1: Check initial balance
GET {{baseUrl}}/accounts/user/{{userId}}

### Step 2: Add $500 to balance
POST {{baseUrl}}/accounts/user/{{userId}}/credit
Content-Type: application/json

{
  "amount": 500.00
}

### Step 3: Check balance after credit
GET {{baseUrl}}/accounts/user/{{userId}}

### Step 4: Audit balance (should be consistent)
GET {{baseUrl}}/accounts/user/{{userId}}/audit

### Step 5: Purchase product ($100)
POST {{baseUrl}}/orders/create
Content-Type: application/json

{
  "userId": {{userId}},
  "productId": {{productId}}
}

### Step 6: Check balance after purchase (should be $500 - $100 = $400)
GET {{baseUrl}}/accounts/user/{{userId}}

### Step 7: Audit balance again
GET {{baseUrl}}/accounts/user/{{userId}}/audit

### Step 8: Check transaction history
GET {{baseUrl}}/accounts/user/{{userId}}/history

### ============================================
### SCENARIO 2: Insufficient balance test
### ============================================

### Step 1: Try to purchase without enough balance
### This should fail with "Insufficient balance" error
POST {{baseUrl}}/accounts/user/{{userId}}/debit
Content-Type: application/json

{
  "amount": 999999.00,
  "productId": {{productId}}
}

### ============================================
### SCENARIO 3: Multiple operations + audit
### ============================================

### Credit $1000
POST {{baseUrl}}/accounts/user/{{userId}}/credit
Content-Type: application/json

{
  "amount": 1000.00
}

### Debit $200
POST {{baseUrl}}/accounts/user/{{userId}}/debit
Content-Type: application/json

{
  "amount": 200.00
}

### Debit $300
POST {{baseUrl}}/accounts/user/{{userId}}/debit
Content-Type: application/json

{
  "amount": 300.00
}

### Credit $500
POST {{baseUrl}}/accounts/user/{{userId}}/credit
Content-Type: application/json

{
  "amount": 500.00
}

### Check balance
GET {{baseUrl}}/accounts/user/{{userId}}

### Audit (should pass)
GET {{baseUrl}}/accounts/user/{{userId}}/audit

### Check history
GET {{baseUrl}}/accounts/user/{{userId}}/history
